"use strict";(self.webpackChunkheft_rushstack_io=self.webpackChunkheft_rushstack_io||[]).push([[444],{158:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(6393);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=p(n),u=a,h=f["".concat(s,".").concat(u)]||f[u]||d[u]||i;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[f]="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>p,toc:()=>f});var r=n(9122),a=n(2501),i=(n(6393),n(158)),o=["components"],c={title:"@rushstack/heft-config-file"},s=void 0,p={unversionedId:"pages/advanced/heft-config-file",id:"pages/advanced/heft-config-file",title:"@rushstack/heft-config-file",description:"The @rushstack/heft-config-file",source:"@site/docs/pages/advanced/heft-config-file.md",sourceDirName:"pages/advanced",slug:"/pages/advanced/heft-config-file",permalink:"/pages/advanced/heft-config-file",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/heft.rushstack.io/docs/pages/advanced/heft-config-file.md",tags:[],version:"current",frontMatter:{title:"@rushstack/heft-config-file"},sidebar:"docsSidebar",previous:{title:"Interfacing with Rush",permalink:"/pages/tutorials/heft_and_rush"},next:{title:"Plugin package index",permalink:"/pages/plugins/package_index"}},l={},f=[{value:"Property inheritance directives",id:"property-inheritance-directives",level:2}],d={toc:f},u="wrapper";function h(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rushstack/tree/main/libraries/heft-config-file"},"@rushstack/heft-config-file"),"\nlibrary is the standard engine used to load Heft's config files. It provides a number of features such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"JSON schema validation"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"extends"')," inheritance with intuitive error messages"),(0,i.kt)("li",{parentName:"ul"},"Support for ",(0,i.kt)("a",{parentName:"li",href:"/pages/intro/rig_packages"},"rig package")," resolution"),(0,i.kt)("li",{parentName:"ul"},"Four different ",(0,i.kt)("inlineCode",{parentName:"li"},'"extends"')," inheritance types (append, merge, replace, computed) with preconfigured defaults"),(0,i.kt)("li",{parentName:"ul"},"Property inheritance directives to customize them")),(0,i.kt)("h2",{id:"property-inheritance-directives"},"Property inheritance directives"),(0,i.kt)("p",null,"When using ",(0,i.kt)("inlineCode",{parentName:"p"},'"extends"')," inheritance, Heft config files are generally preconfigured with an intuitive default\nstrategy for each JSON field. (For a real world example, take a look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"propertyInheritance"),"\nfield from\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rushstack/blob/9ffb14519dd42e5808e56bc2ea80c8734f5f2e5b/heft-plugins/heft-jest-plugin/src/JestPlugin.ts#L675"},"JestPlugin.ts"),".)"),(0,i.kt)("p",null,"If you need a different inheritance type for a particular setting, you can add ",(0,i.kt)("strong",{parentName:"p"},"property inheritance directives"),"\nto your JSON file. For example, suppose that we are extending a hypothetical file with a previously defined\n",(0,i.kt)("inlineCode",{parentName:"p"},"exampleObject")," value that is a keyed object, and a ",(0,i.kt)("inlineCode",{parentName:"p"},"exampleArray")," value that is an array object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "$schema": "https://developer.microsoft.com/json-schemas/heft/v0/example-config-file.schema.json",\n  "extends": "base-project/config/example-config-file.json",\n\n  "$exampleObject.inheritanceType": "merge", // valid choices are: "merge", "replace"\n  "exampleObject": {\n    "$exampleObjectMember.inheritanceType": "merge", // valid choices are: "merge", "replace"\n    "exampleObjectMember": { ... },\n\n    "$exampleArrayMember.inheritanceType": "append", // valid choices are: "append", "replace"\n    "exampleArrayMember": [ ... ]\n  },\n\n  "$exampleArray.inheritanceType": "replace", // valid choices are: "append", "replace"\n  "exampleArray": [ ... ]\n}\n')),(0,i.kt)("p",null,"Once an object is set to a ",(0,i.kt)("inlineCode",{parentName:"p"},"inheritanceType")," of override, all sub-property ",(0,i.kt)("inlineCode",{parentName:"p"},"inheritanceType")," values will be ignored,\nsince the top-most object already overrides all sub-properties."),(0,i.kt)("p",null,"One thing to note is that different logic is used for keyed objects versus arrays. This is to make it explicit\nthat arrays will be appended as-is, and no additional processing (eg. deduplicating if the array is intended\nto be a set) is done during merge. If such behavior is required, it can be done on the implementation side.\nDeduplicating arrays within the ",(0,i.kt)("inlineCode",{parentName:"p"},"@rushstack/heft-config-file")," package doesn't quite make sense, since deduplicating\narrays of non-primitive objects is not easily defined."))}h.isMDXComponent=!0}}]);