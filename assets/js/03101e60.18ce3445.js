"use strict";(self.webpackChunkheft_rushstack_io=self.webpackChunkheft_rushstack_io||[]).push([[9521],{158:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(6393);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=s,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4304:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var r=n(9122),s=n(2501),a=(n(6393),n(158)),o=["components"],i={title:"Heft command line"},l=void 0,p={unversionedId:"pages/intro/cli",id:"pages/intro/cli",title:"Heft command line",description:"heft barebones configuration",source:"@site/docs/pages/intro/cli.md",sourceDirName:"pages/intro",slug:"/pages/intro/cli",permalink:"/pages/intro/cli",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/heft.rushstack.io/docs/pages/intro/cli.md",tags:[],version:"current",frontMatter:{title:"Heft command line"},sidebar:"docsSidebar",previous:{title:"Using rig packages",permalink:"/pages/intro/rig_packages"},next:{title:"Hello world",permalink:"/pages/tutorials/hello_world"}},c={},u=[{value:"heft barebones configuration",id:"heft-barebones-configuration",level:2},{value:"jest-plugin",id:"jest-plugin",level:2},{value:"node-service-plugin",id:"node-service-plugin",level:2},{value:"serverless-stack-plugin",id:"serverless-stack-plugin",level:2},{value:"storybook-plugin",id:"storybook-plugin",level:2},{value:"webpack5-plugin",id:"webpack5-plugin",level:2}],d={toc:u},h="wrapper";function m(e){var t=e.components,n=(0,s.Z)(e,o);return(0,a.kt)(h,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"heft-barebones-configuration"},"heft barebones configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"usage: heft [-h] [--debug] [--unmanaged] <command> ...\n\nHeft is a pluggable build system designed for web projects.\n\nPositional arguments:\n  <command>\n    clean      Clean the project, removing temporary task folders and\n              specified clean paths.\n    run        Run a provided selection of Heft phases.\n    run-watch  Run a provided selection of Heft phases in watch mode..\n\nOptional arguments:\n  -h, --help   Show this help message and exit.\n")),(0,a.kt)("h2",{id:"jest-plugin"},"jest-plugin"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/pages/plugins/jest"},"jest-plugin")," adds these custom command-line parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'  --config RELATIVE_PATH\n                        Use this parameter to control which Jest\n                        configuration file will be used to run Jest tests. If\n                        not specified, it will default to "config/jest.config.\n                        json". This corresponds to the "--config" parameter\n                        in Jest\'s documentation.\n  --debug-heft-reporter\n                        Normally Heft installs a custom Jest reporter so that\n                        test results are presented consistently with other\n                        task logging. If you suspect a problem with the\n                        HeftJestReporter, specify "--debug-heft-reporter" to\n                        temporarily disable it so that you can compare with\n                        how Jest\'s default reporter would have presented it.\n                        Include this output in your bug report. Do not use\n                        "--debug-heft-reporter" in production.\n  --detect-open-handles\n                        Attempt to collect and print open handles preventing\n                        Jest from exiting cleanly. This option has a\n                        significant performance penalty and should only be\n                        used for debugging. This corresponds to the\n                        "--detectOpenHandles" parameter in Jest\'s\n                        documentation.\n  --disable-code-coverage\n                        Disable any configured code coverage. If code\n                        coverage is not configured, this parameter has no\n                        effect.\n  --find-related-tests SOURCE_FILE\n                        Find and run the tests that cover a source file that\n                        was passed in as an argument. This corresponds to the\n                        "--findRelatedTests" parameter in Jest\'s\n                        documentation. This parameter is not compatible with\n                        watch mode.\n  --log-heap-usage, --jest:log-heap-usage\n                        Logs the heap usage after every test. Useful to debug\n                        memory leaks. Use together with --expose-gc in node.\n  --max-workers COUNT_OR_PERCENTAGE\n                        Use this parameter to control maximum number of\n                        worker processes tests are allowed to use. This\n                        parameter is similar to the parameter noted in the\n                        Jest documentation, and can either be an integer\n                        representing the number of workers to spawn when\n                        running tests, or can be a string representing a\n                        percentage of the available CPUs on the machine to\n                        utilize. Example values: "3", "25%"\n  --silent\n                        Prevent tests from printing messages through the\n                        console. This corresponds to the "--silent" parameter\n                        in Jest\'s documentation.\n  -t REGEXP, --test-name-pattern REGEXP\n                        Run only tests with a name that matches a regular\n                        expression. The REGEXP is matched against the full\n                        name, which is a combination of the test name and all\n                        its surrounding describe blocks. This corresponds to\n                        the "--testNamePattern" parameter in Jest\'s\n                        documentation.\n  --test-path-ignore-patterns REGEXP\n                        Avoid running tests with a source file path that\n                        matches one ore more regular expressions. On Windows\n                        you will need to use "/" instead of "\\". This\n                        corresponds to the "--testPathIgnorePatterns"\n                        parameter in Jest\'s documentation.\n  --test-path-pattern REGEXP\n                        Run only tests with a source file path that matches a\n                        regular expression. On Windows you will need to use\n                        "/" instead of "\\". This corresponds to the\n                        "--testPathPattern" parameter in Jest\'s documentation.\n  --test-timeout-ms TIMEOUT\n                        Change the default timeout for tests; if a test\n                        doesn\'t complete within this many milliseconds, it\n                        will fail. Individual tests can override the default.\n                        If unspecified, the default is normally 5000 ms. This\n                        corresponds to the "--testTimeout" parameter in\n                        Jest\'s documentation.\n  -u, --update-snapshots\n                        Update Jest snapshots while running the tests. This\n                        corresponds to the "--updateSnapshots" parameter in\n                        Jest.\n')),(0,a.kt)("h2",{id:"node-service-plugin"},"node-service-plugin"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/pages/plugins/node-service"},"node-service-plugin")," adds these custom command-line parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  --serve\n                        Start a local web server for testing purposes. This\n                        parameter is only available when running in watch\n                        mode.\n")),(0,a.kt)("h2",{id:"serverless-stack-plugin"},"serverless-stack-plugin"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/pages/plugins/serverless-stack"},"serverless-stack-plugin")," adds these custom command-line parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'  --sst\n                        Invokes the SST postprocessing. Requires AWS credentials.\n  --sst-stage STAGE_NAME\n                        Specifies the Serverless Stack stage; equivalent to\n                        to the "--stage" parameter from the "sst" CLI\n')),(0,a.kt)("h2",{id:"storybook-plugin"},"storybook-plugin"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/pages/plugins/storybook"},"storybook-plugin")," adds these custom command-line parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'  --storybook\n                        Used by the "@rushstack/heft-storybook-plugin" package to launch\n                        Storybook.\n')),(0,a.kt)("h2",{id:"webpack5-plugin"},"webpack5-plugin"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/pages/plugins/webpack"},"webpack5-plugin")," adds these custom command-line parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  --serve\n                        Start a local web server for testing purposes using\n                        webpack-dev-server. This parameter is only available\n                        when running in watch mode.\n")))}m.isMDXComponent=!0}}]);