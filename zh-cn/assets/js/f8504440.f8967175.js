"use strict";(self.webpackChunkheft_rushstack_io=self.webpackChunkheft_rushstack_io||[]).push([[6100],{158:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(6393);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},f="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),f=p(t),d=s,u=f["".concat(l,".").concat(d)]||f[d]||h[d]||i;return t?a.createElement(u,o(o({ref:n},c),{},{components:t})):a.createElement(u,o({ref:n},c))}));function u(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=d;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[f]="string"==typeof e?e:s,o[1]=r;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1984:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>f});var a=t(9122),s=t(2501),i=(t(6393),t(158)),o=["components"],r={title:"heft.json"},l=void 0,p={unversionedId:"pages/configs/heft_json",id:"pages/configs/heft_json",title:"heft.json",description:"|     |     |",source:"@site/docs/pages/configs/heft_json.md",sourceDirName:"pages/configs",slug:"/pages/configs/heft_json",permalink:"/zh-cn/pages/configs/heft_json",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/heft.rushstack.io/docs/pages/configs/heft_json.md",tags:[],version:"current",frontMatter:{title:"heft.json"},sidebar:"docsSidebar",previous:{title:"api-extractor-task.json",permalink:"/zh-cn/pages/configs/api-extractor-task_json"},next:{title:"node-service.json",permalink:"/zh-cn/pages/configs/node-service_json"}},c={},f=[{value:"Template",id:"template",level:2}],h={toc:f},d="wrapper";function u(e){var n=e.components,t=(0,s.Z)(e,o);return(0,i.kt)(d,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("table",null,(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"File path:")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"<","project folder",">","/config/heft.json"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/zh-cn/pages/intro/rig_packages"},(0,i.kt)("strong",{parentName:"a"},"Riggable?"))),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Associated plugin:")),(0,i.kt)("td",{parentName:"tr",align:null},"(global)")))),(0,i.kt)("h2",{id:"template"},"Template"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * Defines configuration used by core Heft.\n */\n{\n  "$schema": "https://developer.microsoft.com/json-schemas/heft/v0/heft.schema.json",\n\n  /**\n   * Optionally specifies another JSON config file that this file extends from. This provides a way for standard\n   * settings to be shared across multiple projects.\n   */\n  // "extends": "base-project/config/heft.json",\n\n  /**\n   * Defines aliases for existing Heft actions, and allows them to be invoked by\n   * name with default parameters.  The JSON keys is are user-defined names.\n   *\n   * For example, the "heft start" alias is conventionally defined to invoke\n   * "heft build-watch --serve" using a definition like this:\n   *\n   *   "aliasesByName": { "start": { "actionName": "build-watch", "defaultParameters": [ "--serve" ] } }\n   */\n  "aliasesByName": {\n    // /**\n    //  * The command-line action name of the Heft alias that is being defined.\n    //  * This JSON key is a user-defined value.\n    //  */\n    // "example-alias-name": {\n    //   /**\n    //    * The name of the existing Heft command-line action to be invoked by this alias.\n    //    */\n    //   "actionName": "example-action",\n    //\n    //   /**\n    //    * A list of command-line parameters to pass to the Heft action by default.\n    //    * These parameters will be appended after the specified action and before\n    //    * any user-specified parameters.\n    //    */\n    //   "defaultParameters": [ "--do-some-thing" ]\n    // }\n  },\n\n  /**\n   * List of Heft lifecycle plugins to be loaded for this project.\n   */\n  "heftPlugins": [\n    // {\n    //   /**\n    //    * (REQUIRED) The NPM package name for the plugin.\n    //    */\n    //   "pluginPackage": "@mycorp/heft-example-plugin",\n    //\n    //   /**\n    //    * The name of the plugin to load from the NPM package\'s heft-plugin.json manifest.\n    //    * If not specified, and if the plugin package provides a single plugin, then that\n    //    * plugin will be loaded.\n    //    */\n    //   // "pluginName": "example-plugin",\n    //\n    //   /**\n    //    * Options to pass to the plugin.  This is a custom object whose structure\n    //    * is defined by the plugin.\n    //    */\n    //   // "options": { "example-key": "example-value" }\n    // }\n  ],\n\n  /**\n   * Heft phases that can be run during an execution of Heft.\n   * The JSON keys is are user-defined names.\n   */\n  "phasesByName": {\n    /**\n     * The name of the phase, which is used by other fields such as "phaseDependencies".\n     * This JSON key is a user-defined value.\n     */\n    "example-phase": {\n      /**\n       * A description to be shown in the command-line help.\n       */\n      "phaseDescription": "An example phase",\n\n      /**\n       * A list of delete operations to perform when cleaning at the beginning of phase execution.\n       * Their structure is similar the options used by the delete-files-plugin.\n       */\n      "cleanFiles": [\n        // {\n        //   /**\n        //    * Absolute path to the source file or folder, relative to the project root.\n        //    * If "fileExtensions", "excludeGlobs",  or "includeGlobs" are specified, then "sourcePath"\n        //    * is assumed to be a folder; if it is not a folder, an error will be thrown.\n        //    * Settings such as "includeGlobs" and "excludeGlobs" will be resolved relative to this path.\n        //    * If no globs or file extensions are specified, the entire folder will be copied.\n        //    * If this parameter is not provided, it defaults to the project root.\n        //    */\n        //   // "sourcePath": "lib",\n        //\n        //   /**\n        //    * If specified, this option recursively scans all folders under "sourcePath" and includes\n        //    * any files that match the specified extensions.  If "fileExtensions" and "includeGlobs"\n        //    * are both specified, their selections are added together.\n        //    */\n        //   // "fileExtensions": [ ".png" ],\n        //\n        //   /**\n        //    * A list of glob patterns that select files to be copied.  The paths are resolved relative\n        //    * to "sourcePath", which must be a folder path.  If "fileExtensions" and "includeGlobs"\n        //    * are both specified, their selections are added together.\n        //    *\n        //    * For glob syntax, refer to: https://www.npmjs.com/package/fast-glob\n        //    */\n        //   // "excludeGlobs": [],\n        //\n        //\n        //   /**\n        //    * A list of glob patterns that exclude files or folders from being copied.  The paths are resolved\n        //    * relative to "sourcePath", which must be a folder path.  These exclusions eliminate items that\n        //    * were selected by the "includeGlobs" or "fileExtensions" setting.\n        //    *\n        //    * For glob syntax, refer to: https://www.npmjs.com/package/fast-glob\n        //    */\n        //   // "includeGlobs": [ "**/temp" ]\n        // }\n      ]\n\n      /**\n       * A list of phase names that must be run before this phase can start.\n       */\n      "phaseDependencies": [ ],\n\n      /**\n       * Heft tasks that are run during an execution of the Heft phase.\n       * The JSON keys is are user-defined names.\n       */\n      "tasksByName": {\n        /**\n         * The name of the task, which is used by other fields such as "taskDependencies".\n         * This JSON key is a user-defined value.\n         */\n        "example-task": {\n          /**\n           * A list of task names that must be run before this task can start.\n           */\n          "taskDependencies": [],\n\n          /**\n           * (REQUIRED) The Heft plugin to be loaded, which will perform the operation for this task.\n           */\n          "taskPlugin": {\n            /**\n             * (REQUIRED) The NPM package name for the plugin.\n             */\n            "pluginPackage": "@mycorp/heft-example-plugin",\n\n            /**\n             * The name of the plugin to load from the NPM package\'s heft-plugin.json manifest.\n             * If not specified, and if the plugin package provides a single plugin, then that\n             * plugin will be loaded.\n             */\n            // "pluginName": "example-plugin",\n\n            /**\n             * Options to pass to the plugin.  This is a custom object whose structure\n             * is defined by the plugin.\n             */\n            // "options": { "example-key": "example-value" }\n          }\n        }\n      }\n    }\n  }\n}\n')))}u.isMDXComponent=!0}}]);