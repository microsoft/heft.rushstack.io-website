"use strict";(self.webpackChunkheft_rushstack_io=self.webpackChunkheft_rushstack_io||[]).push([[8497],{158:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(6393);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9080:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=n(9122),r=n(2501),o=(n(6393),n(158)),i=["components"],s={title:"Everyday Heft commands"},l=void 0,p={unversionedId:"pages/tutorials/everyday_commands",id:"pages/tutorials/everyday_commands",title:"Everyday Heft commands",description:"The Hello World tutorial introduced the heft build and heft test command-line actions. In this section, we'll call out a few everyday commands that are particularly useful to know about. Refer to the Heft command line reference for a full listing of actions and parameters.",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/pages/tutorials/everyday_commands.md",sourceDirName:"pages/tutorials",slug:"/pages/tutorials/everyday_commands",permalink:"/zh-cn/pages/tutorials/everyday_commands",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/heft.rushstack.io/docs/pages/tutorials/everyday_commands.md",tags:[],version:"current",frontMatter:{title:"Everyday Heft commands"},sidebar:"docsSidebar",previous:{title:"Adding more tasks",permalink:"/zh-cn/pages/tutorials/adding_tasks"},next:{title:"Interfacing with Rush",permalink:"/zh-cn/pages/tutorials/heft_and_rush"}},u={},c=[{value:"Investigating problems",id:"investigating-problems",level:2},{value:"Running arbitrary sets of phases",id:"running-arbitrary-sets-of-phases",level:2}],d={toc:c},m="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/zh-cn/pages/tutorials/hello_world"},"Hello World")," tutorial introduced the ",(0,o.kt)("inlineCode",{parentName:"p"},"heft build")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"heft test")," command-line actions. In this section, we'll call out a few everyday commands that are particularly useful to know about. Refer to the ",(0,o.kt)("a",{parentName:"p",href:"/zh-cn/pages/intro/cli"},"Heft command line")," reference for a full listing of actions and parameters."),(0,o.kt)("h2",{id:"investigating-problems"},"Investigating problems"),(0,o.kt)("p",null,"If you're diagnosing problems with the Heft build, there are a couple useful parameters to be aware of:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--verbose"),": For example, instead of ",(0,o.kt)("inlineCode",{parentName:"li"},"heft build"),", you can run ",(0,o.kt)("inlineCode",{parentName:"li"},"heft build --verbose")," to see more details about how the tasks are invoked."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--debug"),": For even more detail, you can run ",(0,o.kt)("inlineCode",{parentName:"li"},"heft --debug build")," to see call stacks and additional trace information. Note that ",(0,o.kt)("inlineCode",{parentName:"li"},"--debug")," is a global parameter, so it must precede the ",(0,o.kt)("inlineCode",{parentName:"li"},"build")," action name.")),(0,o.kt)("h2",{id:"running-arbitrary-sets-of-phases"},"Running arbitrary sets of phases"),(0,o.kt)("p",null,"Each phase that you define in ",(0,o.kt)("strong",{parentName:"p"},"heft.config")," will produce a pair of command-line actions\nwhich invoke that phase and its dependencies (as declared using ",(0,o.kt)("inlineCode",{parentName:"p"},"phaseDependencies"),").\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"heft run")," command allows you to choose arbitrary phases to run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'usage: heft run [-h] [-t PHASE] [-T PHASE] [-o PHASE] ...\n\nRun a provided selection of Heft phases.\n\nPositional arguments:\n  "..."                 Scoped parameters. Must be prefixed with "--", ex.\n                        "-- --scopedParameter foo --scopedFlag". For more\n                        information on available scoped parameters, use "--\n                        --help".\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n\nOptional scoping arguments:\n  -t PHASE, --to PHASE  The phase to run to, including all transitive\n                        dependencies.\n  -T PHASE, --to-except PHASE\n                        The phase to run to (but not include), including all\n                        transitive dependencies.\n  -o PHASE, --only PHASE\n                        The phase to run.\n')),(0,o.kt)("p",null,"Suppose that your ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," phase depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"build"),". Running ",(0,o.kt)("inlineCode",{parentName:"p"},"heft test")," would then normally\nperform both phases. To invoke ",(0,o.kt)("strong",{parentName:"p"},"*","only")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," phase, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"heft run --only test"),"."),(0,o.kt)("p",null,"Note that tasks cannot be run individually. The phase is the smallest granularity for\nselecting Heft operations."))}f.isMDXComponent=!0}}]);